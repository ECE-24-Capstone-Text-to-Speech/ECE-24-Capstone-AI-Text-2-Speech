from fastapi import APIRouter, Depends, HTTPException, Response, UploadFile, FastAPI, File
from fastapi.responses import FileResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from internal.getFile import get_list_of_audio_in_temp
from internal.saveFile import save_audio_to_temp

# from models.AudioFile import AudioUploadFile

from dependencies import get_token_header
import torchaudio
import torch.nn as nn
import torch.nn.functional as F
import os
import IPython


from tortoise.api import TextToSpeech
from tortoise.utils.audio import load_audio, load_voice, load_voices

app = FastAPI()

# This will download all the models used by Tortoise from the HuggingFace hub.
tts = TextToSpeech()

# This is the text that will be spoken.
text = "Thanks for reading this article. I hope you learned something."

# Pick a "preset mode" to determine quality. Options: {"ultra_fast", "fast" (default), "standard", "high_quality"}. See docs in api.py
preset = "fast"

# Optionally, upload use your own voice by running the next two cells. I recommend
# you upload at least 2 audio clips. They must be a WAV file, 6-10 seconds long.

CUSTOM_VOICE_NAME = "martin"     ##go through custom voices and optimize this line. There's a bunch in tortoise/voices/
custom_voice_folder = f"tortoise/voices/{CUSTOM_VOICE_NAME}"






router = APIRouter(
    prefix="/files",  # all paths in this file assumes preceed by `/files`
    tags=["files"],
    # dependencies=[Depends(get_token_header)],
    responses={404: {"description": "files path needs functions name appended"}},
)

# router.mount("/files", StaticFiles(directory="temp"), name="audioFiles")


@router.get("/")
async def audio_page():
    content = """
        <body>
            <form action="/files/audioInput" enctype="multipart/form-data" method="post">
                <input name="audioFile" type="file">
                <input type="submit">
            </form>
        </body>
    """
    return HTMLResponse(content=content)


@router.post("/audioInput")
async def audio_input(audioFile: UploadFile | None = None):
    """
    Grabs FormData.audioFile.
    Requires frontend to send file in as FormData, input called "audioFile"
    """
    if not audioFile:
        raise HTTPException(
            status_code=400, detail="No input audio file given in the request."
        )
    fileName = audioFile.filename
    # fileSize = len(audioFile)

    allowed_formats = {"mp3", "wav"}
    file_extension = fileName[-3:]  # last three letters of file name
    if file_extension not in allowed_formats:
        raise HTTPException(
            status_code=400,
            detail="File format not supported. Supported formats are MP3 and WAV.",
        )

    message: str = "Default message"
    saved: bool = False
    # if fileSize > threshhold:
    if fileName not in await get_list_of_audio_in_temp():
        saved, message = await save_audio_to_temp(audioFile)
    else:
        message = "File already exists"

    return {
        "filename": fileName,
        "format": file_extension,
        # "size": fileSize,
        "success": saved,
        "message": message,
    }


@router.get("/audios")
async def get_audio_list():
    audioList = await get_list_of_audio_in_temp()
    print(audioList)
    return audioList


@router.get(
    "/audios/{audio_name}",
    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses={
        200: {"content": {"multipart/form-data": {}}},
        404: {"detail": "File not found"},
    },
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=FileResponse,
)
async def get_audio_file(audio_name: str):
    # audio_bytes: str|None = await fetch_audio_from_temp(audio_name)
    files = await get_list_of_audio_in_temp(fullPath=True)
    for file in files:
        if audio_name == file.split("/")[-1]:
            return FileResponse(path=file)
    else:
        raise HTTPException(status_code=404, detail="File not found")
    
@router.post("/audioInput/upload")
async def upload_files(audioFile: UploadFile, audioFile2: UploadFile, text: str = ''):
    # Save the uploaded files
    custom_voice_folder = f"tortoise/voices/martin"
    os.makedirs(custom_voice_folder, exist_ok=True)
    # Save the uploaded files
    file1_path = os.path.join(custom_voice_folder, audioFile.filename)
    file2_path = os.path.join(custom_voice_folder, audioFile2.filename)

    with open(file1_path, 'wb') as f:
        f.write(audioFile.file.read())

    with open(file2_path, 'wb') as f:
        f.write(audioFile2.file.read())
    # Load the custom voice for Tortoise. # Generate speech with the custotm voice.
    voice_samples, conditioning_latents = load_voice(CUSTOM_VOICE_NAME)

    # Generate speech with the custom voice
    gen = tts.tts_with_preset(text, voice_samples=voice_samples, conditioning_latents=conditioning_latents, preset='fast')

    # Save the generated speech
    generated_path = f'generated-{CUSTOM_VOICE_NAME}.wav'
    torchaudio.save(f'generated-{CUSTOM_VOICE_NAME}.wav', gen.squeeze(0).cpu(), 24000)

    # Optionally, return the generated speech file to the client
    IPython.display.Audio(f'generated-{CUSTOM_VOICE_NAME}.wav')
    return FileResponse(generated_path, media_type="audio/wav", filename=generated_path)
